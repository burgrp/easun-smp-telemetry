#![no_std]
#![no_main]
#![feature(type_alias_impl_trait)]

use esp32c3_hal::{
    clock::ClockControl,
    pac::Peripherals,
    prelude::*,
    timer::TimerGroup,
    Rtc,
    embassy
};
use esp_backtrace as _;
use riscv_rt::entry;
use esp_println::{println};
use embassy_time::{Timer, Duration};
use embassy_executor::{Executor, _export::StaticCell};

#[embassy_executor::task]
async fn start() {
    //name: &str
    let name = "AA";
    println!("Starting {}", name);
    loop {
        println!("Tick {}", name);        
        Timer::after(Duration::from_secs(1)).await;
    }
}

static EXECUTOR: StaticCell<Executor> = StaticCell::new();

#[entry]
fn main() -> ! {
    let peripherals = Peripherals::take().unwrap();
    let system = peripherals.SYSTEM.split();
    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();

    let mut rtc = Rtc::new(peripherals.RTC_CNTL);
    let timer_group0 = TimerGroup::new(peripherals.TIMG0, &clocks);
    let mut wdt0 = timer_group0.wdt;
    let timer_group1 = TimerGroup::new(peripherals.TIMG1, &clocks);
    let mut wdt1 = timer_group1.wdt;

    // Disable watchdog timers
    rtc.swd.disable();
    rtc.rwdt.disable();
    wdt0.disable();
    wdt1.disable();

    embassy::init(&clocks);

    let mut counter: u32 = 0;
        
    let executor = EXECUTOR.init(Executor::new());
    executor.run(|spawner| {
        spawner.spawn(start()).ok();
        spawner.spawn(start()).ok();
    });

}
